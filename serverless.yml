# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: curso-slsl-hola-mundo
# app and org for use with dashboard.serverless.com
app: curso-slsl-hola-mundo
org: jalcantaraa

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:us-east-2:381492256034:table/test1
  #profile: serverless
  apiGateway:
    shouldStartNameWithService: true

plugins:
  - serverless-offline

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  hello:
    handler: handler.hello
  helloUser:
    handler: handler.helloUser
    events:
      - http:
          method: GET
          path: /user/{name}
  createUser:
    handler: handler.createUser
    events:
      - http:
          method: POST
          path: /user
  getEndpoint:
    handler: src/getEndpoint.getEndpoint
    events:
      - http:
          path: get-data
          method: get
  getEndpointFromBD:
    handler: src/getFromBd.getEndpointFromBD
    events:
      - http:
          path: get-data-fromBD
          method: get
  postEndpoint:
    handler: src/postEndpoint.postEndpoint
    events:
      - http:
          path: store-data
          method: post

resources:
  Resources:
    Test1:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: test1
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH